(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    let lookup (env : env) (varname : varid) : value =
      try !(List.assoc varname env) with Not_found -> raise (EvalError "Var not found") ;;

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val e -> exp_to_concrete_string e
      | Closure (exp, env) -> if printenvp
                              then "Closure: (" ^ exp_to_concrete_string exp ^ ", " 
                                   ^ env_to_string env ^ ")"
                              else exp_to_concrete_string exp 

    and env_to_string (env : env) : string =
      match env with
      | [] -> "[]"
      | (a, b) :: tl -> "(" ^ a ^ value_to_string !b ^ ") " ^ env_to_string tl ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let eval_s (_exp : expr) (_env : Env.env) : Env.value =
  let rec eval_s_help (exp : expr) : expr = 
    match exp with
    | Var _ -> raise (EvalError "Unbound var")
    | Num _ -> exp
    | Bool _ -> exp
    | Unop (u, x) ->  let new_x = eval_s_help x in (match new_x with
      | Num n -> Num (~- n)
      | _ -> eval_s_help (Unop (u, new_x)))
    | Binop (b, x, y) -> if b = Equals 
                         then Bool (eval_s_help x = eval_s_help y) 
                         else (match eval_s_help x, eval_s_help y with
      | Num n, Num m -> (match b with
        | Plus -> Num (n + m)
        | Times -> Num (n * m)
        | Minus -> Num (n - m)
        | LessThan -> Bool (n < m)
        | _ -> raise (EvalError "Invalid binop"))
      | _ -> Binop (b, eval_s_help x, eval_s_help y))
    | Conditional (x, y, z) -> (match eval_s_help x with
      | Bool b -> if b 
                  then eval_s_help y 
                  else eval_s_help z
      | _ -> raise (EvalError "Invalid conditional"))
    | Fun (f, x) -> Fun (f, x)
    | Let (f, def, bdy) -> eval_s_help (subst f def bdy)
    | Letrec (f, def, bdy) -> 
        let z = eval_s_help (subst f (Letrec (f, def, Var f)) def) in 
        eval_s_help (subst f z bdy) 
    | Raise -> exp
    | Unassigned -> raise (EvalError "Unassigned var")
    | App (a, b) -> (match eval_s_help a with
      | Fun (f, x) -> let b_val = eval_s_help b in 
        eval_s_help (subst f b_val x)
      | _ -> raise (EvalError ("Invalid function")))
    in 
  Env.Val (eval_s_help _exp) ;;
    
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (_exp : expr) (_env : Env.env) : Env.value =
  let rec eval_d_help (exp : expr) : expr = 
    let exp_val (v : Env.value) : expr =
      (match v with
      | Val exp -> exp
      | Closure (exp, _env) -> exp) in
    match exp with
    | Var v -> exp_val (Env.lookup _env v)
    | Num n -> Num n
    | Bool b -> Bool b
    | Unop (u, x) -> (match eval_d_help x with
      | Num n -> (match u with
        | Negate -> Num (~-n))
        | _ -> raise (EvalError "Invalid unop"))
    | Binop (b, x, y) -> (match eval_d_help x, eval_d_help y with
      | Num n1, Num n2 -> (match b with
        | Plus -> Num (n1 + n2)
        | Minus -> Num (n1 - n2)
        | Times -> Num (n1 * n2)
        | Equals -> Bool (n1 = n2)
        | LessThan -> Bool (n1 < n2))
      | Bool b1, Bool b2 -> (match b with
        | Equals -> Bool (b1 = b2)
        | _ -> raise (EvalError "Invalid binop"))
      | _ -> raise (EvalError "Invalid binop"))
    | Conditional (x, y, z) -> (match eval_d_help x with
      | Bool b -> if b
                  then eval_d_help y
                  else eval_d_help z
      | _ -> raise (EvalError "Invalid conditional"))
    | Fun (f, x) -> Fun (f, x)
    | Let (f, def, bdy) -> exp_val (eval_d bdy (Env.extend _env f (ref (eval_d def _env))))
    | Letrec (f, def, bdy) -> let unasgnd = ref (Env.Val Unassigned) in
                              let extend_env = Env.extend _env f unasgnd in
                              let def_ = eval_d def extend_env in
                              unasgnd := def_;
                              exp_val (eval_d bdy extend_env)
    | Raise -> Raise
    | Unassigned -> Unassigned
    | App (a, b) -> match eval_d_help a with
      | Fun (f, x) -> exp_val (eval_d x (Env.extend _env f (ref (eval_d b _env))))
      | _ -> raise (EvalError "Invalid app") in
  Val (eval_d_help _exp) ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  let exp_of_eval (e : expr) : expr =
    (match eval_l e env with
     | Val exp -> exp
     | Closure (exp, _env) -> exp) in
  match exp with
  | Var v -> Env.lookup env v
  | Num n -> Val (Num n)
  | Bool b -> Val (Bool b)
  | Unop (u, x) -> (match exp_of_eval x with
    | Num n -> (match u with Negate -> Val (Num ~-n))
      | _ -> raise (EvalError "Invalid unop"))
  | Binop (b, x, y) -> (match exp_of_eval x, exp_of_eval y with
    | Num n1, Num n2 -> (match b with
      | Plus -> Val (Num (n1 + n2))
      | Minus -> Val (Num (n1 - n2))
      | Times -> Val (Num (n1 * n2))
      | Equals -> Val (Bool (n1 = n2))
      | LessThan -> Val (Bool (n1 < n2)))
    | Bool b1, Bool b2 -> (match b with
      | Equals -> Val (Bool (b1 = b2))
      | _ -> raise (EvalError "Invalid binop"))
    | _ -> raise (EvalError "Invalid binop"))
  | Conditional (x, y, z) -> (match exp_of_eval x with
    | Bool b -> if b 
                then eval_l y env
                else eval_l z env
    | _ -> raise (EvalError "Invalid conditional"))
  | Fun (f, x) -> Env.close (Fun (f, x)) env
  | Let (f, def, bdy) -> eval_l bdy (Env.extend env f (ref (eval_l def env)))
  | Letrec (f, def, bdy) -> let unasgn = ref (Env.Val Unassigned) in
                            let ext_env = Env.extend env f unasgn in
                            let def_ = eval_l def ext_env in
                            unasgn := def_;
                            eval_l bdy ext_env
  | Raise -> Val Raise
  | Unassigned -> Val Unassigned
  | App (a, b) -> match eval_l a env with
    | Closure (Fun (f, x), env_closure) -> eval_l x (Env.extend env_closure f 
                                          (ref (eval_l b env)))
    | _ -> raise (EvalError "Invalid app") ;;  
  

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_l;;
